{"version":3,"sources":["components/Search.js","components/UserCard.js","components/RepoCard.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","handleUserNameChange","e","value","target","setState","username","state","history","this","className","onChange","type","name","placeholder","onClick","push","React","Component","withRouter","UserCard","user","src","avatar_url","company","bio","RepoCard","repo","href","html_url","full_name","stargazers_count","watchers_count","App","repos","userDataError","loading","pageSize","page","fetchingRepos","handleScroll","currentScroll","window","scrollY","maxScroll","scrollMaxY","public_repos","loadPage","fetchUserData","a","fetch","res","ok","json","data","message","error","fetchRepos","fetchData","reposError","Promise","all","undefined","login","addEventListener","match","params","removeEventListener","hanleScroll","renderRepos","length","Fragment","map","key","id","Boolean","location","hostname","ReactDOM","render","path","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.3d4bf53b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass Search extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      username: props.username || '',\r\n    };\r\n  }\r\n\r\n  handleUserNameChange = e => {\r\n    const value = e.target.value;\r\n\r\n    this.setState({\r\n      username: value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { history } = this.props;\r\n    const { username } = this.state;\r\n\r\n    return (\r\n      <div className=\"bg-dark\">\r\n        <div className=\"container py-5\">\r\n          <div className=\"row\">\r\n            <div className=\"col-8 offset-2 text-center\">\r\n              <div className=\"row\">\r\n                <div className=\"col-9\">\r\n                  <input\r\n                    className=\"form-control\"\r\n                    value={username}\r\n                    onChange={this.handleUserNameChange}\r\n                    type=\"text\"\r\n                    name=\"username\"\r\n                    placeholder=\"Enter username\"\r\n                  />\r\n                </div>\r\n                <div className=\"col-3\">\r\n                  <button\r\n                    onClick={() => history.push(`/${username}`)}\r\n                    className=\"btn btn-large btn-success\">\r\n                    Search\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Search);\r\n","import React from 'react';\r\n\r\nconst UserCard = ({ user }) => {\r\n  return (\r\n    <div className=\"card mb-4\">\r\n      <div className=\"card-body\">\r\n        <div className=\"d-flex\">\r\n          <img className=\"img-round user-image mr-5\" src={user.avatar_url} />\r\n          <div>\r\n            <h1>{user.name}</h1>\r\n            <p className=\"mb-0 font-italic\">{user.company}</p>\r\n            <p className=\"mb-0\">{user.bio}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserCard;\r\n","import React from 'react';\r\n\r\nconst RepoCard = ({ repo }) => (\r\n  <div className=\"cardghfg mb-4abcd\">\r\n    <div className=\"card-body\">\r\n      <a href={repo.html_url} target=\"_blank\">\r\n        <h3>{repo.full_name}</h3>\r\n\r\n        <p>\r\n          <strong>Stars:</strong> {repo.stargazers_count}\r\n        </p>\r\n        <p className=\"mb-0\">\r\n          <strong>Watchers:</strong> {repo.watchers_count}\r\n        </p>\r\n      </a>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default RepoCard;\r\n","import React from 'react';\r\nimport Search from './components/Search';\r\nimport UserCard from './components/UserCard';\r\nimport RepoCard from './components/RepoCard';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst PAGE_SIZE = 10;\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    user: null,\r\n    repos: [],\r\n    userDataError: null,\r\n    loading: false,\r\n    pageSize: 10,\r\n    page: 1,\r\n    fetchingRepos: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.handleScroll);\r\n    const { match } = this.props;\r\n\r\n    if (match.params.username) this.fetchData(match.params.username);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.hanleScroll);\r\n  }\r\n\r\n  handleScroll = () => {\r\n    const currentScroll = window.scrollY;\r\n    const maxScroll = window.scrollMaxY;\r\n    const { page, pageSize, user } = this.state;\r\n\r\n    if (\r\n      user &&\r\n      maxScroll - currentScroll <= 100 &&\r\n      (page - 1) * pageSize < user.public_repos\r\n    )\r\n      this.loadPage();\r\n  };\r\n\r\n  fetchUserData = async username => {\r\n    const res = await fetch(`https://api.github.com/users/${username}`);\r\n    if (res.ok) {\r\n      const data = await res.json();\r\n\r\n      return { data };\r\n    }\r\n\r\n    const error = (await res.json()).message;\r\n\r\n    return { error: \" \" };\r\n  };\r\n\r\n  fetchRepos = async username => {\r\n    const { pageSize, page } = this.state;\r\n    const res = await fetch(\r\n      `https://api.github.com/users/${username}/repos?page=${page}&per_page=${pageSize}`,\r\n    );\r\n    if (res.ok) {\r\n      const data = await res.json();\r\n\r\n      return { data };\r\n    }\r\n\r\n    const error = (await res.json()).message;\r\n\r\n    return {\r\n      error: `No user exists with  ${username} username`\r\n    };\r\n  };\r\n\r\n  fetchData = async username => {\r\n    this.setState(\r\n      { loading: true, userDataError: null, reposError: null },\r\n      async () => {\r\n        try {\r\n          const [user, repos] = await Promise.all([\r\n            this.fetchUserData(username),\r\n            this.fetchRepos(username),\r\n          ]);\r\n\r\n          if (user.data !== undefined && repos.data !== undefined) {\r\n            return this.setState({\r\n              user: user.data,\r\n              repos: repos.data,\r\n              page: 2,\r\n              loading: false,\r\n            });\r\n          }\r\n\r\n          this.setState({\r\n            userDataError: user.error,\r\n            reposError: repos.error,\r\n            loading: false,\r\n          });\r\n        } catch (err) {\r\n          this.setState({\r\n            error: 'There was some error',\r\n            loading: false,\r\n          });\r\n        }\r\n      },\r\n    );\r\n  };\r\n\r\n  loadPage = async () => {\r\n    if (this.state.fetchingRepos === true) return;\r\n\r\n    this.setState({ fetchingRepos: true }, async () => {\r\n      const { data } = await this.fetchRepos(this.state.user.login);\r\n\r\n      if (data)\r\n        this.setState(state => ({\r\n          repos: [...state.repos, ...data],\r\n          page: state.page + 1,\r\n          fetchingRepos: false,\r\n        }));\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { userDataError, reposError, loading, user, repos } = this.state;\r\n    const { match } = this.props;\r\n\r\n    const renderRepos = !loading && !reposError && !!repos.length;\r\n\r\n    return (\r\n      <>\r\n        <Search username={match.params.username} />\r\n        <div className=\"container\">\r\n          <div className=\"text-center pt-5\">\r\n            {loading && <p>Loading...</p>}\r\n            {userDataError && <p className=\"text-danger\">{userDataError}</p>}\r\n          </div>\r\n          {!loading && !userDataError && user && <UserCard user={user} />}\r\n          {reposError && <p className=\"text-danger\">{reposError}</p>}\r\n\r\n          {renderRepos && (\r\n            <React.Fragment>\r\n              {repos.map(repo => (\r\n                <RepoCard key={repo.id} repo={repo} />\r\n              ))}\r\n            </React.Fragment>\r\n          )}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <Route\r\n      path=\"/:username?\"\r\n      exact\r\n      render={({ match }) => <App key={match.params.username} />}\r\n    />\r\n  </Router>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}